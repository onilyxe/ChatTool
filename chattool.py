from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.types import BotCommand, ReactionTypeEmoji
from aiogram.filters import Command
from PIL import Image
import random

import logging
import json
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
with open('config.json', 'r', encoding='utf-8') as file:
    config = json.load(file)

if 'ADMINS' not in config:
    config['ADMINS'] = []
    with open('config.json', 'w') as file:
        json.dump(config, file, indent=4)

TOKEN = config['TOKEN']
CHAT_TITLE = config.get('CHAT_TITLE', '')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='Markdown'))
dp = Dispatcher()
router = Router()

logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(Command(commands=['start']))
async def start_command_handler(message: Message):
    await message.answer("üõ° –ü—Ä–∏–≤—ñ—Ç. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø–æ–∑–±—É—Ç–∏—Å—è –Ω–æ—É–Ω–µ–π–º—ñ–≤ —ñ –æ–∫—Ä–µ–º–∏—Ö —ñ–Ω–¥–∏–≤—ñ–¥—É—É–º—ñ–≤ —É —á–∞—Ç—ñ. –ù–µ –∑–∞–±—É–¥—å –¥–∞—Ç–∏ –º–µ–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–©–µ –≤–∏–≤—á–∞–π /help")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
@router.message(Command(commands=['help']))
async def help_command_handler(message: Message):
    await message.answer(
        "‚öôÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"
        "\n\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
        "\n/help ‚Äî —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

        "\n/id [chat] [replay] ‚Äî –ø–æ–∫–∞–∑—É—î id"
        "\n/bluetext ‚Äî —Å–∏–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–≤–ø"
        "\n/roulet ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —Ç–µ–∂ –¥–ª—è –º–∞–≤–ø"
        "\n\\*/kb [text] [replay] [one] ‚Äî –∫–ª–∞–≤–∞ –¥–ª—è —Å–ø–∞–º—É. one - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ"
        "\n\\*/ckb ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î –∞–∫—Ç–∏–≤–Ω—ñ –∫–ª–∞–≤–∏"
        "\n/pic ‚Äî –∑—Ä–æ–±–∏—Ç–∏ –∞–≤–æ—é"
        "\n\\*/picset ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –ø–Ω–≥"
        "\n/topic ‚Äî –¥–æ–¥–∞—Ç–∏ –≤ –Ω–∞–∑–≤—É —á–∞—Ç–∞"
        "\n\\*/topicset ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É —á–∞—Ç–∞. –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞"
        "\n/pin ‚Äî —Ä–æ–∑—Ö—É—è—Ä–∏—Ç–∏ –∫—Ä–µ–º–ª—å"
        "\n\n\\* ‚Äî –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ –±–æ—Ç–∞ (–Ω–µ —á–∞—Ç–∞)"
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /id
@router.message(Command(commands=['id']))
async def id_command_handler(message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        await message.answer(f"ID —é–∑–µ—Ä–∞: `{user_id}`")
    elif "chat" in message.text:
        chat_id = message.chat.id
        await message.answer(f"ID —á–∞—Ç—É: `{chat_id}`")
    else:
        user_id = message.from_user.id
        await message.answer(f"–¢–≤—ñ–π ID: `{user_id}`")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /roulet
@router.message(Command(commands=['roulet']))
async def roulet_command_handler(message: Message):
    await message.answer(
        "üöÄ *–ü—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:*"
        "\n_–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–π —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø—Ä–∏–∑. –£ –∫–æ–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Å–≤—ñ–π –ø—Ä–∏–∑ —ñ —Å–≤–æ—ó —à–∞–Ω—Å–∏. –ù–µ –∑–∞–±—É–¥—å –¥–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç (—Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø—Ä–∞—Ü—é—é—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç–∞–º) —ñ –≤–∏–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ–Ω–∞–∫—à–µ —è –Ω–µ –∑–º–æ–∂—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏üò¢_"
        "\n\nü•≥ *–°–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤:*"
        "\n*/yadebil*"
        "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–∫—Ä—ñ–ø–ª—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_"
        "\n*–®–∞–Ω—Å:* _10%_"
        "\n*/yagandone*"
        "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞_"
        "\n*–®–∞–Ω—Å:* _5%_"
        "\n*/yapedarasik*"
        "\n*–ü—Ä–∏–∑:* _–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤–æ—Ä—Ü—è_"
        "\n*–®–∞–Ω—Å:* _1%_"
    )

kick_roulet_commands = ['/yadebil', '/yagandone', '/yapedarasik']

@router.message(lambda message: message.text is not None and any(word in message.text.lower() for word in kick_roulet_commands))
async def kick_user(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        await bot.ban_chat_member(chat_id, user_id)
        await bot.unban_chat_member(chat_id, user_id)
        await message.answer("üò¢ *–ù–∞ –∂–∞–ª—å, —Ç–∏ –Ω–µ –≤–∏–≥—Ä–∞–≤*\n_–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑_")
    except TelegramBadRequest as e:
        if 'not enough rights' in str(e).lower():
            await message.answer("‚ö†Ô∏è –©–æ—Å—å –Ω–µ —Ç–∞–∫. –ú–æ–∂–ª–∏–≤–æ, —É –º–µ–Ω–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞")
        else:
            await message.answer(f"–ß–æ—Ä—Ç–∏–ª–∞, —Ç–∏ –≤–∂–µ –∞–¥–º—ñ–Ω")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /bluetext
@router.message(Command(commands=['bluetext']))
async def bluetext_command_handler(message: Message):
    await message.answer("/BLUE /TEXT\n/MUST /CLICK\n/I /AM /A /STUPID /ANIMAL /THAT /ISS /ATTRACTED /TO /COLORS")

kick_words = [
    "—Å–ª–∞–≤–∞ —Ä–æ—Å—Å–∏–∏", "/kekmi", "/blue", "/text", "/must", "/click", "/i", "/am", "/stupid", "/animal", "/that", "/iss", "/attracted", "/colors"
]

@router.message(lambda message: message.text is not None and any(word in message.text.lower() for word in kick_words))
async def kick_words_handler(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        await bot.ban_chat_member(chat_id, user_id)
        await bot.unban_chat_member(chat_id, user_id)
        await message.answer("ü´µüòÇ")
    except TelegramBadRequest:
        return

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /kb
@router.message(Command(commands=['kb']))
async def kb_handler(message: Message):
    if message.from_user.id not in config['ADMINS']: 
        return

    args = message.text.split()[1:]
    one_time_keyboard = 'one' in args

    if one_time_keyboard:
        args.remove('one')

    if args:
        button_text = ' '.join(args)
    elif message.reply_to_message:
        button_text = message.reply_to_message.text
    else:
        await message.answer("–¢–µ–∫—Å—Ç..?")
        return

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=button_text)]], resize_keyboard=False, one_time_keyboard=one_time_keyboard, input_field_placeholder=button_text)
    
    await message.answer("üÜí", reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /ckb
@router.message(Command(commands=['ckb']))
async def ckb_handler(message: Message):
    if message.from_user.id not in config['ADMINS']:
        return

    keyboard = ReplyKeyboardRemove()
    await message.answer("üÜí", reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /pic
@router.message(Command(commands=['pic']))
async def set_chat_photo_handler(message: Message):

    if not message.reply_to_message or not message.reply_to_message.photo:
        await message.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ. –ù–µ —Ñ–∞–π–ª–æ–º. –í —Ä–µ–ø–ª–∞–π")
        return

    photo = message.reply_to_message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    original_image_path = 'original_photo.png'
    with open(original_image_path, 'wb') as f:
        f.write(downloaded_file.read())

    original_image = Image.open(original_image_path)
    overlay_image = Image.open('mn.png')

    fixed_overlay_size = (150, 150)
    overlay_image = overlay_image.resize(fixed_overlay_size, Image.LANCZOS)

    original_width, original_height = original_image.size

    if original_width < 512 or original_height < 512:
        aspect_ratio = original_width / original_height
        if aspect_ratio > 1:
            new_width = max(512, original_width)
            new_height = int(new_width / aspect_ratio)
        else:
            new_height = max(512, original_height)
            new_width = int(new_height * aspect_ratio)
        original_image = original_image.resize((new_width, new_height), Image.LANCZOS)

    original_width, original_height = original_image.size
    overlay_width, overlay_height = overlay_image.size
    position = ((original_width - overlay_width) // 2, (original_height - overlay_height) // 2)
    original_image.paste(overlay_image, position, overlay_image if overlay_image.mode == 'RGBA' else None)

    final_image_path = 'final_photo.png'
    original_image.save(final_image_path)

    try:
        input_file = FSInputFile(final_image_path)
        await bot.set_chat_photo(message.chat.id, photo=input_file)
    except TelegramBadRequest as e:
        await message.answer(f"‚ö†Ô∏è: `{str(e)}`")

    os.remove(original_image_path)
    os.remove(final_image_path)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /picset
@router.message(Command(commands=['picset']))
async def set_overlay_photo_handler(message: Message):
    if message.from_user.id not in config['ADMINS']:
        return

    if not message.reply_to_message or not message.reply_to_message.document:
        await message.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ png. –í —Ä–µ–ø–ª–∞–π")
        return

    document = message.reply_to_message.document
    if document.mime_type != 'image/png':
        await message.answer("‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ png. –í —Ä–µ–ø–ª–∞–π")
        return

    file_info = await bot.get_file(document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    with open('mn.png', 'wb') as f:
        f.write(downloaded_file.read())

    await message.answer("üÜí")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /pin
@router.message(Command(commands=['pin']))
async def pin_command_handler(message: Message):
    if message.reply_to_message:
        try:
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
        except TelegramBadRequest as e:
            await message.answer(f"‚ö†Ô∏è: {e}")
    else:
        await message.answer("–†–µ–ø–ª–∞–π –¥–µ?")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /topic
@router.message(Command(commands=['topic']))
async def add_topic_handler(message: Message):
    if not message.reply_to_message:
        await message.answer("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    chat_title = config['CHAT_TITLE']
    topic_text = message.reply_to_message.text

    new_chat_title = f"{chat_title} ‚Äî {topic_text}"
    
    try:
        await bot.set_chat_title(message.chat.id, new_chat_title)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /topicset
@router.message(Command(commands=['topicset']))
async def set_topic_title_handler(message: Message):
    if message.from_user.id not in config['ADMINS']:
        return

    if not message.reply_to_message:
        await message.answer("–ê –¥–µ —Ä–µ–ø–ª–∞–π?")
        return

    new_chat_title = message.reply_to_message.text
    config['CHAT_TITLE'] = new_chat_title

    with open('config.json', 'w', encoding='utf-8') as file:
        json.dump(config, file, indent=4, ensure_ascii=False)

    try:
        await bot.set_chat_title(message.chat.id, new_chat_title)
    except TelegramBadRequest as e:
        await message.answer(f"‚ö†Ô∏è: {e}")

    await message.answer(f"üÜí: {new_chat_title}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó
@router.message()
async def random_reaction_handler(message: Message):
    if random.randint(1, 100) <= 5:
        reactions = ["‚ù§Ô∏è", "üëç", "üòÇ", "üî•", "üò¢", "üòç", "üëè", "üòÆ", "ü§î", "üò°", "üòé", "üéâ", "üò¥", "üôÑ", "ü§Ø", "ü§©", "üò≠", "ü•∫", "üëÄ", "üñ§", "üíî", "üòú", "ü•≥", "ü§™", "üòè", "üòá", "üëã", "‚úåÔ∏è", "üôè", "ü§ù", "üíä", "üíØ"]        
        reaction = random.choice(reactions)
        reaction_object = ReactionTypeEmoji(emoji=reaction)
        try:
            await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id, reaction=[reaction_object])
        except TelegramBadRequest:
            pass

dp.include_router(router)

if __name__ == "__main__":
    import asyncio
    
    async def main():
        commands = [
            BotCommand(command="/id", description="[chat] [replay] ‚Äî –ø–æ–∫–∞–∑—É—î id"),
            BotCommand(command="/bluetext", description="- —Å–∏–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–≤–ø"),
            BotCommand(command="/roulet", description="- —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤, —Ç–µ–∂ –¥–ª—è –º–∞–≤–ø"),
            BotCommand(command="/pic", description="- –∑—Ä–æ–±–∏—Ç–∏ –∞–≤–æ—é"),
            BotCommand(command="/topic", description="- –¥–æ–¥–∞—Ç–∏ –≤ –Ω–∞–∑–≤—É —á–∞—Ç–∞"),
            BotCommand(command="/pin", description="- —Ä–æ–∑—Ö—É—è—Ä–∏—Ç–∏ –∫—Ä–µ–º–ª—å")
        ]

        await bot.set_my_commands(commands)
        await dp.start_polling(bot)

    asyncio.run(main())